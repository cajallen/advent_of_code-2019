input_string = """3,225,1,225,6,6,1100,1,238,225,104,0,1101,90,64,225,1101,15,56,225,1,14,153,224,101,-147,224,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,2,162,188,224,101,-2014,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1001,18,81,224,1001,224,-137,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,16,16,224,101,-256,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,101,48,217,224,1001,224,-125,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1002,158,22,224,1001,224,-1540,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,83,31,225,1101,56,70,225,1101,13,38,225,102,36,192,224,1001,224,-3312,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1102,75,53,225,1101,14,92,225,1101,7,66,224,101,-73,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,77,60,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1107,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,524,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,107,677,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226"""

def iterate_opcode(opcode):
	i = 0
	while(True):
		operation = str(opcode[i]).rjust(5, '0')
		
		#end
		if (operation[-2:] == "99"):
			break
		
		
		pos1 = opcode[i+1] if operation[-3] == "0" else i+1
		#add
		if (operation[-1] == "1"):
			pos2 = opcode[i+2] if operation[-4] == "0" else i+2
			pos3 = opcode[i+3] if operation[-5] == "0" else i+3
			opcode[pos3] = opcode[pos1] + opcode[pos2]

			if (str(opcode[i]).rjust(5, '0') == operation):
				i += 4

		#mult
		elif (operation[-1] == "2"):
			pos2 = opcode[i+2] if operation[-4] == "0" else i+2
			pos3 = opcode[i+3] if operation[-5] == "0" else i+3
			opcode[pos3] = opcode[pos1] * opcode[pos2]

			if (str(opcode[i]).rjust(5, '0') == operation):
				i += 4

		#input
		elif (operation[-1] == "3"):
			opcode[pos1] = int(input("input: "))

			if (str(opcode[i]).rjust(5, '0') == operation):
				i += 2

		#output
		elif (operation[-1] == "4"):
			print(opcode[pos1])
			i += 2

		#jump if !0
		elif (operation[-1] == "5"):
			if(opcode[pos1] != 0):
				pos2 = opcode[i+2] if operation[-4] == "0" else i+2
				i = opcode[pos2]
			else:
				i += 3

		#jump if 0
		elif (operation[-1] == "6"):
			if(opcode[pos1] == 0):
				pos2 = opcode[i+2] if operation[-4] == "0" else i+2
				i = opcode[pos2]
			else:
				i += 3

		#less than
		elif (operation[-1] == "7"):
			pos2 = opcode[i+2] if operation[-4] == "0" else i+2
			pos3 = opcode[i+3] if operation[-5] == "0" else i+3
			if (opcode[pos1] < opcode[pos2]):
				opcode[pos3] = 1
			else:
				opcode[pos3] = 0

			if (str(opcode[i]).rjust(5, '0') == operation):
				i += 4

		#equals
		elif (operation[-1] == "8"):
			pos2 = opcode[i+2] if operation[-4] == "0" else i+2
			pos3 = opcode[i+3] if operation[-5] == "0" else i+3
			if (opcode[pos1] == opcode[pos2]):
				opcode[pos3] = 1
			else:
				opcode[pos3] = 0

			if (str(opcode[i]).rjust(5, '0') == operation):
				i += 4

		else:
			print(opcode)
			break

opcode = list(map(int, input_string.split(",")))
iterate_opcode(opcode)